/**
定义变量、嵌套
混合、函数运算
*/

// 1、声明变量: $变量名: 变量值
$font_Size: 16px; // 普通变量
$font_Size: 30px !default; // 默认变量
$font_Size: 40px !default;
$borderDirection: top !default; // 特殊变量：一般变量为属性值；特殊变量应用于属性名+复杂属性值
// sass从上往下渲染，默认后面变量覆盖前面变量；加上!default,使该变量变成了第一个被声明的变量
// 两个defult声明，后面的覆盖前面的变量；没有default的覆盖有default的

// 1.2、多值变量-list形式
$color: red, green, yellow;
.title-1 {
  color: nth($color, 1);
}
// 1.3、多值变量-map形式
$text: (
  info: #ccc,
  success: green,
  warning: red,
);

@each $i, $c in $text {
  .text-#{$i} {
    color: $c;
  }
}

// 2、使用变量
.title {
  width: 1000px;
  height: 100px;
  font-size: $font_Size;
  color: nth($color, 1); // 从第一个开始
  background-color: nth($color, 3);
  border-#{$borderDirection}: 1px;
}

// 3、作用域：全局作用域、局部作用域。
// 变量要声明之后才能使用；可以重复声明；后面的覆盖前面的

// ========特性1:混合。将一组属性的规则集混入另一组规则集。用于定义经常重复使用的样式，比如flex
@mixin flex($direction: colomn) {
  // 参数混合
  display: flex;
  flex-direction: $direction;
  justify-content: center;
  align-items: center;
}

.header {
  @include flex(); // @include后面添加名称及参数（可选）
  color: nth($color, 2);
}
// ========特性2:嵌套。class中嵌套class、属性嵌套
.footer {
  border: 1px solid red {
    left: 0; // border-left: 0px
    right: 0;
  }
}
// ========特性3:运算。+ - * / %
p {
  color: #010203 * 2; //结果为 color: #020406;
}

// ========特性4:继承。@extend （可以继承另一个选择器）
// 使用 % 定义一个被继承的样式
%border-style {
  border: 1px solid #aaa;
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  border-radius: 5px;
}
.container {
  @extend %border-style;
  color: red;
}
.container1 {
  //继承另一个选择器
  @extend .container;
}
